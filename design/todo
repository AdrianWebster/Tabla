Simulation
- √ Better topology handling (boxes in boxes)
- √ Balls have velocity
- √ Proper ball-ball collisions
- √ Ball masses/relative sizes matter.

New features
- Recognize colorful marker objects (lego bricks, eg)
	- Let me remove keyboard controls
- Sound effects
	- Clacking balls
- Visual effects
	√ Squash and stretch balls
		- Normalize ball squashing effect? Just always shove in a normal vector, and have a tick counter... (and if multiple collisions, then average them, don't use biggest.)
		- Ball<>Ball collision squishing effect is relative to ball sizes/masses.
	- Environment mapping on chrome balls
- Paper velocity/transformation
	- Use OCV Optical flow?
	- Then apply force to balls on collision w paper edge
	- Translate/rotate/transform balls
- More out there:
	- Lift paper/depth = height field they roll off of.
	- Detect hand with kinect, put old vision image data under it so we effectively ignore the hand.
		(Maybe don't even project there).

Technical
- Better registration
	- Automatic video-projector calibration (gray coding, or variant).
	- Will let me swap out, improve physical gear.
- Lower latency
	- new capture method?
	- multi-threaded? (measure latencies first)