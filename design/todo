Basic
- XML parameter loading/saving
	- Settings > Debug, etc..
	- Screen/Camera >
		- Which to use
		- Mapping coordinates
			- From where in camera frame?
			- To where in projector frame?
			- Scaling: In world units, what does this map to? (let's think in terms of inches or mm)
		- Contour resolution thresholds
	- Behaviors
	- Implement as nested callbacks.
		- getfile( path, getxmldatalambda() ) .. so does hot-loading, etc...
		- getxmlsubtree( xml, path, xmlsubtreehandler() .. could then call this for parts of it
- Better data visualization.
	- Construct a pipeline, log images and data flow edges to it;
		+ contour data, too
		+ transformation functions
			- with parameters
		+ this could be output as text, automatically generated graph, or linked to a diagram
			- the parameters could become live ui elements
			- this could become an intermediate language for specifying pipelines, so read back in; turn the tables on it.

Simulation
- √ Better topology handling (boxes in boxes)
- √ Balls have velocity
- √ Proper ball-ball collisions
- √ Ball masses/relative sizes matter.
- √ Ball <> Ball collision position correction is now relative to masses.

New features
- Recognize colorful marker objects (lego bricks, eg)
	- Let me remove keyboard controls
- Sound effects
	- Clacking balls
- Visual effects
	√ Squash and stretch balls
		- Normalize ball squashing effect? Just always shove in a normal vector, and have a tick counter... (and if multiple collisions, then average them, don't use biggest.)
		√ Ball<>Ball collision squishing effect is relative to ball sizes/masses.
	- Environment mapping on chrome balls
- Paper velocity/transformation
	- Use OCV Optical flow?
	- Then apply force to balls on collision w paper edge
	- Translate/rotate/transform balls
- More out there:
	- Lift paper/depth = height field they roll off of.
	- Detect hand with kinect, put old vision image data under it so we effectively ignore the hand.
		(Maybe don't even project there).

Technical
- Better registration
	- Automatic video-projector calibration (gray coding, or variant).
	- Will let me swap out, improve physical gear.
- Lower latency
	- new capture method?
	- multi-threaded? (measure latencies first)
- Use a Kinect.
	- Probably lower latency
	- Has IR for cleaner paper detection
	- Depth for hand rejection
	- Can do balls rolling off paper with z-height